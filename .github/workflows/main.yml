name: Build Android APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Generate debug keystore
        run: |
          mkdir -p .github/keystore
          keytool -genkey -v \
            -keystore .github/keystore/debug.keystore \
            -alias androiddebugkey \
            -storepass android \
            -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"

      - name: Build Release APK and extract errors
        id: build
        continue-on-error: true
        shell: bash
        run: |
          set -o pipefail
          ./gradlew assembleRelease --stacktrace --info > build_output.txt 2>&1 || true

          if [ -f build_output.txt ]; then
            grep -E "e: .*\.kt:[0-9]+:[0-9]+|error:|Unresolved reference:|cannot find symbol|Exception|Caused by|Execution failed for task|resource linking failed|resource .+ not found" \
              build_output.txt > errors_only.txt || true

            if [ ! -s errors_only.txt ]; then
              echo "No error patterns detected in the last 1000 lines." > errors_only.txt
              tail -n 50 build_output.txt >> errors_only.txt
            fi
          else
            echo "Build log not found!" > errors_only.txt
          fi

      - name: Upload error-only log
        uses: actions/upload-artifact@v4
        with:
          name: Errors-Only-Log-${{ github.run_number }}
          path: errors_only.txt
          retention-days: 7

      - name: Sign APK if exists
        if: always()
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            echo "APK_EXISTS=true" >> $GITHUB_ENV

            ZIPALIGN=$(find $ANDROID_HOME/build-tools -name zipalign | sort -r | head -n 1)
            APKSIGNER=$(find $ANDROID_HOME/build-tools -name apksigner | sort -r | head -n 1)

            echo "Using zipalign: $ZIPALIGN"
            echo "Using apksigner: $APKSIGNER"

            $ZIPALIGN -v -p 4 "$APK_PATH" aligned.apk

            $APKSIGNER sign \
              --ks .github/keystore/debug.keystore \
              --ks-pass pass:android \
              --key-pass pass:android \
              --out app-release-signed.apk \
              aligned.apk

            $APKSIGNER verify --verbose app-release-signed.apk
          else
            echo "APK_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Upload signed APK
        if: env.APK_EXISTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: WhatsAppCleanerPro-Signed-APK-${{ github.run_number }}
          path: app-release-signed.apk
          retention-days: 30
